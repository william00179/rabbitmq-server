load("@bazel-erlang//:xref.bzl", "xref")
load("@bazel-erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    "rabbitmq_integration_suite",
    "rabbitmq_lib",
    "rabbitmq_suite",
)

APP_NAME = "rabbitmq_peer_discovery_aws"

APP_DESCRIPTION = "AWS-based RabbitMQ peer discovery backend"

EXTRA_APPS = [
    "inets",
]

DEPS = [
    "//deps/rabbit_common:bazel_erlang_lib",
    "//deps/rabbitmq_peer_discovery_common:bazel_erlang_lib",
]

RUNTIME_DEPS = [
    "//deps/rabbitmq_aws:bazel_erlang_lib",
    "//deps/rabbit:bazel_erlang_lib",
]

rabbitmq_lib(
    app_description = APP_DESCRIPTION,
    app_name = APP_NAME,
    extra_apps = EXTRA_APPS,
    runtime_deps = RUNTIME_DEPS,
    deps = DEPS,
)

xref(tags = ["xref"])

plt(
    name = "base_plt",
    apps = EXTRA_APPS,
    plt = "//:base_plt",
)

dialyze(
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":base_plt",
    tags = ["dialyze"],
)

broker_for_integration_suites()

PACKAGE = "deps/rabbitmq_peer_discovery_aws"

suites = [
    rabbitmq_integration_suite(
        PACKAGE,
        name = "config_schema_SUITE",
        size = "small",
    ),
    # NOTE: integration_SUITE requires aws credentials and a docker image.
    # They can be supplied with:
    # --test_env AWS_ACCESS_KEY_ID=... --test_env AWS_SECRET_ACCESS_KEY=...
    # --test_env RABBITMQ_IMAGE=...
    # bazel args
    rabbitmq_suite(
        name = "integration_SUITE",
        size = "large",
        additional_srcs = [
            "test/aws_ecs_util.erl",
        ],
        tags = [
            "aws",
            "external",
        ],
        deps = [
            "@rabbitmq_ct_helpers//:bazel_erlang_lib",
        ],
    ),
    rabbitmq_suite(
        name = "unit_SUITE",
        size = "small",
        runtime_deps = [
            "@meck//:bazel_erlang_lib",
        ],
    ),
]

assert_suites(
    suites,
    glob(["test/**/*_SUITE.erl"]),
)
