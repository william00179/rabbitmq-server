load("@bazel-erlang//:bazel_erlang_lib.bzl", "erlc")
load("@bazel-erlang//:xref.bzl", "xref")
load("@bazel-erlang//:dialyze.bzl", "dialyze")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    "rabbitmq_integration_suite",
    "rabbitmq_lib",
    "rabbitmq_suite",
)

APP_NAME = "rabbitmq_management"

APP_DESCRIPTION = "RabbitMQ Management Console"

APP_MODULE = "rabbit_mgmt_app"

EXTRA_APPS = [
    "mnesia",
    "ranch",
    "ssl",
    "crypto",
    "public_key",
]

APP_ENV = """[
	    {http_log_dir,      none},
	    {load_definitions,  none},
	    {management_db_cache_multiplier, 5},
	    {process_stats_gc_timeout, 300000},
	    {stats_event_max_backlog, 250},

	    {cors_allow_origins, []},
	    {cors_max_age, 1800},
	    {content_security_policy, "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'self'"}
	  ]"""

FIRST_SRCS = [
    "src/rabbit_mgmt_extension.erl",
]

DEPS = [
    "//deps/amqp_client:bazel_erlang_lib",
    "//deps/rabbit_common:bazel_erlang_lib",
    "//deps/rabbit:bazel_erlang_lib",
    "//deps/rabbitmq_management_agent:bazel_erlang_lib",
]

RUNTIME_DEPS = [
    "//deps/rabbitmq_web_dispatch:bazel_erlang_lib",
    "@cowboy//:bazel_erlang_lib",
    "@cowlib//:bazel_erlang_lib",
]

rabbitmq_lib(
    app_description = APP_DESCRIPTION,
    app_env = APP_ENV,
    app_module = APP_MODULE,
    app_name = APP_NAME,
    extra_apps = EXTRA_APPS,
    first_srcs = FIRST_SRCS,
    runtime_deps = RUNTIME_DEPS,
    deps = DEPS,
)

xref(tags = ["xref"])

dialyze(
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = "//:base_plt",
    tags = ["dialyze"],
)

broker_for_integration_suites()

erlc(
    name = "rabbit_mgmt_runtime_parameters_util",
    testonly = True,
    srcs = [
        "test/rabbit_mgmt_runtime_parameters_util.erl",
    ],
    dest = "test",
    deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

PACKAGE = "deps/rabbitmq_management"

suites = [
    rabbitmq_suite(
        name = "cache_SUITE",
        size = "small",
        runtime_deps = [
            "@rabbitmq_ct_helpers//:bazel_erlang_lib",
        ],
        deps = [
            "@proper//:bazel_erlang_lib",
        ],
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "clustering_prop_SUITE",
        size = "large",
        deps = [
            "//deps/rabbitmq_management_agent:bazel_erlang_lib",
            "@proper//:bazel_erlang_lib",
        ],
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "clustering_SUITE",
        flaky = True,
        deps = [
            "//deps/rabbitmq_management_agent:bazel_erlang_lib",
        ],
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "config_schema_SUITE",
        size = "small",
    ),
    rabbitmq_suite(
        name = "listener_config_SUITE",
        size = "small",
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "rabbit_mgmt_http_health_checks_SUITE",
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "rabbit_mgmt_http_SUITE",
        size = "large",
        additional_beam = [
            ":rabbit_mgmt_runtime_parameters_util",
        ],
        shard_count = 3,
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "rabbit_mgmt_only_http_SUITE",
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "rabbit_mgmt_rabbitmqadmin_SUITE",
        additional_beam = [
            ":rabbit_mgmt_runtime_parameters_util",
        ],
        data = [
            ":bin/rabbitmqadmin",
        ],
    ),
    rabbitmq_suite(
        name = "rabbit_mgmt_stats_SUITE",
        size = "small",
        runtime_deps = [
            "@rabbitmq_ct_helpers//:bazel_erlang_lib",
        ],
        deps = [
            "//deps/rabbitmq_management_agent:bazel_erlang_lib",
            "@proper//:bazel_erlang_lib",
        ],
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "rabbit_mgmt_test_db_SUITE",
        deps = [
            "//deps/rabbitmq_management_agent:bazel_erlang_lib",
        ],
    ),
    rabbitmq_suite(
        name = "rabbit_mgmt_test_unit_SUITE",
        size = "small",
    ),
    rabbitmq_suite(
        name = "stats_SUITE",
        size = "small",
        deps = [
            "//deps/rabbitmq_management_agent:bazel_erlang_lib",
            "@proper//:bazel_erlang_lib",
        ],
    ),
]

assert_suites(
    suites,
    glob(["test/**/*_SUITE.erl"]),
)
